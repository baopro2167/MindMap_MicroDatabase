// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(MindMapDbContext))]
    [Migration("20251025050429_2510")]
    partial class _2510
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Model.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BranchId"));

                    b.Property<int>("BranchType")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MindMapId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceNodeId")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TargetNodeId")
                        .HasColumnType("integer");

                    b.HasKey("BranchId");

                    b.HasIndex("SourceNodeId");

                    b.HasIndex("TargetNodeId");

                    b.HasIndex("MindMapId", "SourceNodeId", "TargetNodeId")
                        .IsUnique();

                    b.ToTable("Branch", t =>
                        {
                            t.HasCheckConstraint("CK_Branch_Source_Not_Target", "\"SourceNodeId\" <> \"TargetNodeId\"");
                        });
                });

            modelBuilder.Entity("Model.MindMap", b =>
                {
                    b.Property<int>("MindMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MindMapId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() AT TIME ZONE 'UTC'");

                    b.Property<int>("CreatedByUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.HasKey("MindMapId");

                    b.ToTable("MindMap");
                });

            modelBuilder.Entity("Model.MindMapReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                    b.Property<int>("MembershipId")
                        .HasColumnType("integer");

                    b.Property<int>("MindMapId")
                        .HasColumnType("integer");

                    b.Property<string>("ReportContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ReportId");

                    b.HasIndex("MindMapId");

                    b.ToTable("MindMapReport");
                });

            modelBuilder.Entity("Model.Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NodeId"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("MindMapId")
                        .HasColumnType("integer");

                    b.Property<int>("NodeType")
                        .HasColumnType("integer");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("integer");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionY")
                        .HasColumnType("real");

                    b.Property<string>("Shape")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("NodeId");

                    b.HasIndex("MindMapId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("Model.Branch", b =>
                {
                    b.HasOne("Model.MindMap", "MindMap")
                        .WithMany("Branches")
                        .HasForeignKey("MindMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Node", "SourceNode")
                        .WithMany("OutgoingBranches")
                        .HasForeignKey("SourceNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Node", "TargetNode")
                        .WithMany("IncomingBranches")
                        .HasForeignKey("TargetNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MindMap");

                    b.Navigation("SourceNode");

                    b.Navigation("TargetNode");
                });

            modelBuilder.Entity("Model.MindMapReport", b =>
                {
                    b.HasOne("Model.MindMap", "MindMap")
                        .WithMany("Reports")
                        .HasForeignKey("MindMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MindMap");
                });

            modelBuilder.Entity("Model.Node", b =>
                {
                    b.HasOne("Model.MindMap", "MindMap")
                        .WithMany("Nodes")
                        .HasForeignKey("MindMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Node", "ParentNode")
                        .WithMany("ChildNodes")
                        .HasForeignKey("ParentNodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MindMap");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("Model.MindMap", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Nodes");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Model.Node", b =>
                {
                    b.Navigation("ChildNodes");

                    b.Navigation("IncomingBranches");

                    b.Navigation("OutgoingBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
